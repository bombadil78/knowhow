-----------------------------------------------------
POSTGRES 101
-----------------------------------------------------

General
- Both databases and schemas are collections of objects like tables, data types, functions or operators
- Databases cannot share objects among users
- Schemas can share objects among users
- Users can access the database cluster using different authentication methods; in Postgres users and roles are synonyms
- A privilege is a right that can be granted to a user for an object, e.g. database; the privilege can also be revoked. Possible privileges are: SELECT, INSERT, UPDATE, DELETE, TRUNCATE, ...
- Any object can have an owner; in the context of a database the owner gets all privileges by default. Any other access is controlled using privileges

Authentication
Postgres uses a configuration to allow access to the database cluster. The access rights are defined in a rule table. Once an access matches a row in the table the rule is evaluated. Access is granted if the rule evaluates to true, otherwise access is denied. No further rules are evaluated.

A rule consists of the following properties
- Type: E.g. local for access from a Unix domain-sockets or host for TCP/IP connections
- Database: Databases that are accessed
- User: Database user that wants to authenticate
- Address: IP-address patterns 
- Method: E.g. peer to rely on OS, md5 for password authentication

On Ubuntu Linux the configuration file is located at /etc/postgresql/<some-version>/main/pg_hba.conf

See also https://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html

Database management
There are command-line tools that facilitate the interaction with the database cluster:
- createdb <db-name>: Creates a new database with the current user as owner
- createdb -O <other-user> <db-name>: Creates a new database with the given user as owner
- dropdb <db-name>: Drops an existing database
- pg_dump or pg_dump <db-name>: Dumps a database cluster or a selected database
- createuser <user-name>: Creates a new user
- createuser <user-name> -P: Creates a new user and asks for the inital password
- dropuser <user-name>: Drops an existing user

Privileges
A superuser or the owner of an object can manage privileges to a object for another user using GRANT and REVOKE.

See also https://www.postgresql.org/docs/current/static/sql-grant.html

Useful console commands
\l:  List databases including ownership and privileges
\du: List users
\dp: List privileges of the currently logged in user
\dt: List tables
\dn: List namespace / schema

-----------------------------------------------------
MERGING WITH GIT
-----------------------------------------------------
General cases
- fast-forward: Merging of two branches while one branch fully contains the other. This will forward the HEAD pointer of the branch contained in the other branch to the HEAD of the containing branch. This merge is only possible if there are no conflicts.
- 3-way merge: Merging of two branches while no branch fully contains the other; there is a common ancestor from which on the histories of the two branches diverge. Depending on

There are different merging strategies:
- recursive: Default strategy for exactly 2 heads
- octopus: Default strategy for >= 2 heads
- ours: >= 2 heads, but always favors the branch that is merged into (e.g. merge outdated branches)
- subtree

Conflict presentation
<<<<<<< branch-to-merge-into
some-local-data
=======
>>>>>>> branch-to-merge-from
some-remote-data

Conflict resolution is done using a merge tool. The merge tool can be configured using 'git config --global merge.tool <some-tool>'

Merging configuration options
--commit: Automatically introduce a merge-commit if the merge succeeds
--no-commit: Similar to a failing merge. The user can further inspect the merge result and must commit manually.
--ff: Fast-forward if possible, otherwise introduce a merge-commit
--no-ff:  Never fast-forward, always introduce a merge-commit
--ff-only: Only accept fast-forward merges (or the status is already up-to-date)
--squash: Squash all the history of the branched that is merged into the current branch together

Rebasing

1) Before

  ___ b1
 /
a 
 \
  --- b2

2) git rebase b1 (on branch b2)

3) After

a --- b1 --- b2

-----------------------------------------------------
Spring Boot Testing Support
-----------------------------------------------------

@RunWith(SpringRunner.class)
@SpringBootTest
@AutoConfigure
@TestPropertySource

Different slices that can be tested are
- Full server stack (with or without servlet part)
- JSON serialization / deserialization
- Data repositories
-

-----------------------------------------------------
Spring REST Client
-----------------------------------------------------

